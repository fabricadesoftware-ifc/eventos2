image: debian:buster

services:
  - postgres:12

variables:
  # Make package managers store their caches in the right paths
  # so GitLab CI can persist them between runs
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pypoetry"
  NPM_CONFIG_CACHE: "$CI_PROJECT_DIR/.cache/npm"

  # Configuration for the test database service
  POSTGRES_DB: eventos2
  POSTGRES_USER: eventos2
  POSTGRES_PASSWORD: unsafe-password-for-testing

  # Configuration for the deploy stage
  TEST_SSH_HOST_KEY: "[app2.fabricadesoftware.ifc.edu.br]:1022 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIE1u+sxf1LVqV/i4RRQ8NT1L+6XOH40qZJYYZcMZlkFn"
  CI_REGISTRY_IMAGE_BACKEND: $CI_REGISTRY_IMAGE/backend
  CI_REGISTRY_IMAGE_BACKEND_CACHE: $CI_REGISTRY_IMAGE/backend/cache
  CI_REGISTRY_IMAGE_FRONTEND: $CI_REGISTRY_IMAGE/frontend
  CI_REGISTRY_IMAGE_FRONTEND_CACHE: $CI_REGISTRY_IMAGE/frontend/cache

stages:
  - test
  - build
  - deploy

test_backend:
  stage: test
  image: yurihs/python-poetry:1.1.12
  cache:
    key:
      files:
        - poetry.lock
    paths:
      - .cache/pip/
      - .cache/pypoetry/
  coverage: '/TOTAL.*\s+(\d+%)$/'
  variables:
    SECRET_KEY: unsafe-key-for-testing
    DATABASE_URL: postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres/$POSTGRES_DB
  script:
    - poetry install
    - poetry run black --check eventos2 tests
    - poetry run isort -rc eventos2 tests
    - poetry run flake8 eventos2 tests
    - poetry run bandit --quiet --recursive eventos2
    - poetry run pytest --cov=eventos2

test_frontend:
  stage: test
  image: node:14-buster
  cache:
    key:
      files:
        - frontend/package-lock.json
    paths:
      - .cache/npm/
      - frontend/node_modules/
  script:
    - cd frontend
    - npm install --prefer-offline
    - npm run lint



build_backend:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/backend.dockerfile --destination $CI_REGISTRY_IMAGE_BACKEND:$CI_COMMIT_SHORT_SHA --destination $CI_REGISTRY_IMAGE_BACKEND:latest --cache=true --cache-repo=$CI_REGISTRY_IMAGE_BACKEND_CACHE
  only:
    - master
  needs:
    - test_backend

build_frontend:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/frontend.dockerfile --destination $CI_REGISTRY_IMAGE_FRONTEND:$CI_COMMIT_SHORT_SHA --destination $CI_REGISTRY_IMAGE_FRONTEND:latest --cache=true --cache-repo=$CI_REGISTRY_IMAGE_FRONTEND_CACHE
  only:
    - master
  needs:
    - test_frontend



deploy_backend:
  stage: deploy
  image: yurihs/gitlab-ci-ssh:1
  script:
    - . setup-ssh --local-name app2 --host app2.fabricadesoftware.ifc.edu.br --port 1022 --user dokku --private-key "$TEST_SSH_PRIVATE_KEY" --host-key "$TEST_SSH_HOST_KEY"
    - ssh app2 deploy-from-registry eventos2-backend $CI_COMMIT_SHORT_SHA
  only:
    - master
  needs:
    - build_backend

deploy_frontend:
  stage: deploy
  image: yurihs/gitlab-ci-ssh:1
  script:
    - . setup-ssh --local-name app2 --host app2.fabricadesoftware.ifc.edu.br --port 1022 --user dokku --private-key "$TEST_SSH_PRIVATE_KEY" --host-key "$TEST_SSH_HOST_KEY"
    - ssh app2 deploy-from-registry eventos2-frontend $CI_COMMIT_SHORT_SHA
  only:
    - master
  needs:
    - build_frontend
